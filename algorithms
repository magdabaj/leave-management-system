{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled6.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/magdabaj/user-profile/blob/master/algorithms\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A20Xcst3ZV__"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import io \n",
        "import random\n",
        "import math\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PJsvHngZavP6"
      },
      "source": [
        "from google.colab import files \n",
        "uploaded = files.upload()\n",
        "dane = pd.read_csv(io.BytesIO(uploaded['maszyna1.csv']), sep=';')#, names = [\"czas\",\"termin\"]) \n",
        "print(dane)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uXoe1rpsOCzQ"
      },
      "source": [
        "policz_sume(dane)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7gXHwoJuZawG"
      },
      "source": [
        "def policz_sume(dane):\n",
        "  #print(dane.loc[0])\n",
        "  dane['Ukonczenie'] = dane['Czas']\n",
        "  for i in range(1,80):\n",
        "    dane.Ukonczenie[i] = dane.Ukonczenie[i] + dane.Ukonczenie[i-1]\n",
        "  dane['Kwadrat'] = (dane['Ukonczenie'] - dane['Termin'])**2\n",
        "  suma = sum(dane['Kwadrat'])\n",
        "  #print(dane)\n",
        "  return(suma)\n",
        "\n",
        "def zmien(dane, a1, a2):\n",
        "  a = dane.loc[a1].copy()\n",
        "  dane.loc[a1] = dane.loc[a2]\n",
        "  dane.loc[a2] = a\n",
        "  return(dane)\n",
        "\n",
        "def losuj(dane):\n",
        "  lista = random.sample(range(0, 80), 80)\n",
        "  #print(dane)\n",
        "  dane1 = pd.DataFrame(columns=['Numer', 'Czas', 'Termin'])\n",
        "  for i in range(0,80):\n",
        "    #print(lista[i])\n",
        "    a = dane.loc[lista[i]].copy()\n",
        "    dane1.loc[i] = a\n",
        "  #print(dane1)\n",
        "  return(dane1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d636uqfVZyys"
      },
      "source": [
        "#WSPINACZKA\n",
        "for k in range(1,2):\n",
        "\n",
        "  dane = losuj(dane)\n",
        "  if k == 1:\n",
        "    minimum = policz_sume(dane)\n",
        "  min = policz_sume(dane)\n",
        "  print(min)\n",
        "  iMin = 1\n",
        "  jMin = 2\n",
        "  \n",
        "  while(1):\n",
        "    min = policz_sume(dane)\n",
        "    for i in range(0,79):\n",
        "      for j in range(i+1,80):\n",
        "        zmien(dane,i,j)\n",
        "        suma = policz_sume(dane)\n",
        "        #if i<3:\n",
        "          #print(suma)\n",
        "        if suma < min:\n",
        "          min = suma\n",
        "          iMin = i\n",
        "          jMin = j\n",
        "        zmien(dane,i,j)\n",
        "\n",
        "    print(\"Minimum lokalne:\",min)\n",
        "    #print(dane)\n",
        "    #print(zmien(dane,iMin,jMin))\n",
        "    if min < minimum or k == 1:\n",
        "      minimum = min\n",
        "      iMinimum = iMin\n",
        "      jMinimum = jMin\n",
        "      kolejnosc = dane\n",
        "    if min == policz_sume(dane):\n",
        "      print(\"koniec\")\n",
        "      break\n",
        "    zmien(dane,iMin,jMin)\n",
        "    #print(\"zmiana miejsc:\",iMin,jMin) \n",
        "\n",
        "print(\"Minimum globalne:\",minimum)\n",
        "print(zmien(kolejnosc,iMinimum,jMinimum))\n",
        "for i in range(0,80):\n",
        "  print(kolejnosc.Numer[i])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6dKI-ZANa5CT",
        "outputId": "d30b3d48-7f04-4d7e-f3e8-172d50d1919d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "#WYZARZANIE\n",
        "\n",
        "dane = pd.read_csv(io.BytesIO(uploaded['maszyna1.csv']), sep=';')#, names = [\"czas\",\"termin\"]) \n",
        "\n",
        "for n in range(1,2):\n",
        "  #print(\"\")\n",
        "  #m = n*50\n",
        "  x0 = dane\n",
        "  t0= 15000\n",
        "  t01 = t0\n",
        "  final_t = 1 \n",
        "  alpha = 0.999\n",
        "  #final_t = t0*(alpha**101)\n",
        "  i = 0\n",
        "\n",
        "  min = policz_sume(x0)\n",
        "  while (t0 > final_t):\n",
        "    min = policz_sume(x0)\n",
        "    if i%100 == 0:#> 99:#math.log(final_t/t01,alpha)-1: #>99\n",
        "      print(i, \" \", min)\n",
        "      \n",
        "    x = random.sample(range(0, 80), 2)\n",
        "    zmien(x0,x[0],x[1])\n",
        "\n",
        "    dE = policz_sume(x0) - min\n",
        "    zmien(x0,x[0],x[1])\n",
        "    if (dE < 0):\n",
        "      zmien(x0,x[0],x[1])\n",
        "    else:\n",
        "      rand = random.random()\n",
        "      if (rand < math.exp(-dE/t0)):\n",
        "        a=5\n",
        "        zmien(x0,x[0],x[1])\n",
        "\n",
        "    t0 *= alpha\n",
        "    i +=1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0   832681\n",
            "100   461946\n",
            "200   343747\n",
            "300   207487\n",
            "400   278601\n",
            "500   318416\n",
            "600   301079\n",
            "700   206215\n",
            "800   201565\n",
            "900   205772\n",
            "1000   248423\n",
            "1100   200944\n",
            "1200   177527\n",
            "1300   195462\n",
            "1400   192668\n",
            "1500   144359\n",
            "1600   137251\n",
            "1700   118285\n",
            "1800   102650\n",
            "1900   126477\n",
            "2000   106477\n",
            "2100   112478\n",
            "2200   91437\n",
            "2300   69353\n",
            "2400   71541\n",
            "2500   62482\n",
            "2600   58929\n",
            "2700   57288\n",
            "2800   50940\n",
            "2900   54559\n",
            "3000   52241\n",
            "3100   52733\n",
            "3200   48483\n",
            "3300   43717\n",
            "3400   42041\n",
            "3500   37876\n",
            "3600   35997\n",
            "3700   34882\n",
            "3800   32786\n",
            "3900   31067\n",
            "4000   27749\n",
            "4100   28764\n",
            "4200   26735\n",
            "4300   21593\n",
            "4400   21783\n",
            "4500   20356\n",
            "4600   19986\n",
            "4700   19453\n",
            "4800   18656\n",
            "4900   18822\n",
            "5000   17739\n",
            "5100   17773\n",
            "5200   17920\n",
            "5300   16404\n",
            "5400   16173\n",
            "5500   15885\n",
            "5600   15357\n",
            "5700   14689\n",
            "5800   14733\n",
            "5900   14491\n",
            "6000   14305\n",
            "6100   14236\n",
            "6200   14252\n",
            "6300   13959\n",
            "6400   13819\n",
            "6500   13437\n",
            "6600   13111\n",
            "6700   12945\n",
            "6800   12862\n",
            "6900   12745\n",
            "7000   12785\n",
            "7100   12183\n",
            "7200   12155\n",
            "7300   12155\n",
            "7400   11972\n",
            "7500   11816\n",
            "7600   11816\n",
            "7700   11725\n",
            "7800   11625\n",
            "7900   11625\n",
            "8000   11625\n",
            "8100   11625\n",
            "8200   11625\n",
            "8300   11524\n",
            "8400   11523\n",
            "8500   11510\n",
            "8600   11468\n",
            "8700   11252\n",
            "8800   11252\n",
            "8900   11252\n",
            "9000   11240\n",
            "9100   11240\n",
            "9200   11215\n",
            "9300   11059\n",
            "9400   11059\n",
            "9500   11059\n",
            "9600   11059\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sCDbkyYebKN_",
        "outputId": "419fd855-3d21-47d9-e211-afe9891dcdbe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 649
        }
      },
      "source": [
        "#TABU\n",
        "\n",
        "tabuList = np.zeros(shape=(80,80))\n",
        "\n",
        "for k in range(1,2):\n",
        "\n",
        "  dane = losuj(dane)\n",
        "  if k == 1:\n",
        "    minimum = policz_sume(dane)\n",
        "  min = policz_sume(dane)\n",
        "  print(min)\n",
        "  iMin = 1\n",
        "  jMin = 2\n",
        "  \n",
        "  while(1):\n",
        "    min = policz_sume(dane)\n",
        "    minTabu = min\n",
        "    for i in range(0,79):\n",
        "      for j in range(i+1,80):\n",
        "        zmien(dane,i,j)#\n",
        "        suma = policz_sume(dane)#\n",
        "        if tabuList[i,j] == 0:\n",
        "          #zmien(dane,i,j)\n",
        "          #suma = policz_sume(dane)\n",
        "          \n",
        "          if suma < min:\n",
        "            min = suma\n",
        "            iMin = i\n",
        "            jMin = j\n",
        "          #zmien(dane,i,j)\n",
        "        else:\n",
        "          if (suma < minTabu):\n",
        "            minTabu = suma\n",
        "            iTabu = i\n",
        "            jTabu = j\n",
        "        zmien(dane,i,j)\n",
        "\n",
        "    if minTabu < min * 0.97: #funkcja aspiracji\n",
        "      print(\"wykorzystano funkcje aspiracji\")\n",
        "      min = minTabu\n",
        "      iMin - iTabu\n",
        "      jMin = jTabu\n",
        "\n",
        "    print(\"Minimum lokalne:\",min)\n",
        "    tabuList[iMin,jMin] = 5\n",
        "    #print(tabuList)\n",
        "    #print(dane)\n",
        "    #print(zmien(dane,iMin,jMin))\n",
        "    if min < minimum or k == 1:\n",
        "      minimum = min\n",
        "      iMinimum = iMin\n",
        "      jMinimum = jMin\n",
        "      kolejnosc = dane\n",
        "    if min == policz_sume(dane):\n",
        "      print(\"koniec\")\n",
        "      break\n",
        "    zmien(dane,iMin,jMin)\n",
        "    for i in range(1,80):\n",
        "      for j in range(1,80):\n",
        "        if tabuList[i,j] > 0:\n",
        "          tabuList[i,j] -=1\n",
        "          #print(\"Ruch\", i, j, \"zabroniony przez\", tabuList[i,j])\n",
        "    #print(tabuList)\n",
        "    #print(\"zmiana miejsc:\",iMin,jMin) \n",
        "\n",
        "print(\"Minimum globalne:\",minimum)\n",
        "print(zmien(kolejnosc,iMinimum,jMinimum))\n",
        "for i in range(0,80):\n",
        "  print(kolejnosc.Numer[i])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "768816\n",
            "Minimum lokalne: 688573\n",
            "Minimum lokalne: 618551\n",
            "Minimum lokalne: 555165\n",
            "Minimum lokalne: 497879\n",
            "Minimum lokalne: 447505\n",
            "Minimum lokalne: 404392\n",
            "Minimum lokalne: 365292\n",
            "Minimum lokalne: 326066\n",
            "Minimum lokalne: 292530\n",
            "Minimum lokalne: 264329\n",
            "Minimum lokalne: 240021\n",
            "Minimum lokalne: 217971\n",
            "Minimum lokalne: 196515\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-7a6186bc6ac8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m80\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mzmien\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdane\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0msuma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpolicz_sume\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdane\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtabuList\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m           \u001b[0;31m#zmien(dane,i,j)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-2-7eeb3426ad1f>\u001b[0m in \u001b[0;36mpolicz_sume\u001b[0;34m(dane)\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0mdane\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Ukonczenie'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdane\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Czas'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m80\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0mdane\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUkonczenie\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdane\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUkonczenie\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdane\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUkonczenie\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m   \u001b[0mdane\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Kwadrat'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdane\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Ukonczenie'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mdane\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Termin'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0msuma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdane\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Kwadrat'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    880\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 882\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    883\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    884\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_hashable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m    988\u001b[0m         \u001b[0;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    989\u001b[0m         \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 990\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values_for_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    991\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    992\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_values_for_loc\u001b[0;34m(self, series, loc, key)\u001b[0m\n\u001b[1;32m   4631\u001b[0m         \"\"\"\n\u001b[1;32m   4632\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4633\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4634\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4635\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    }
  ]
}